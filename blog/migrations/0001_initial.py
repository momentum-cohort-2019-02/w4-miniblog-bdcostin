# Generated by Django 2.1.7 on 2019-03-10 20:29

from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Author',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(max_length=100)),
                ('last_name', models.CharField(max_length=100)),
            ],
            options={
                'ordering': ['last_name', 'first_name'],
            },
        ),
        migrations.CreateModel(
            name='BlogPost',
            fields=[
                ('title', models.CharField(max_length=200)),
                ('post', models.TextField()),
                ('posted', models.DateField()),
                ('summary', models.TextField(help_text='Enter a description for the blog post', max_length=1000)),
                ('id', models.UUIDField(default=uuid.uuid4, help_text='Unique ID for this particular post across whole site', primary_key=True, serialize=False)),
                ('author', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='blog.Author')),
            ],
            options={
                'ordering': ['posted'],
            },
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='Topic',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Enter a blog topic (e.g. Django Basics)', max_length=200)),
            ],
        ),
        migrations.AddField(
            model_name='blogpost',
            name='topic',
            field=models.ManyToManyField(help_text='Select a topic for this post', to='blog.Topic'),
        ),
    ]
